<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_653938_interest.InteRESTIncidentUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>InteRESTIncidentUtils</name>
        <script><![CDATA[var InteRESTIncidentUtils = Class.create();
InteRESTIncidentUtils.prototype = {
    initialize: function(target) {

        try {
            gs.info('starting prototype target is ' + target);

            // get record from target table
            var endPoint = new GlideRecord('x_653938_interest_target');
            endPoint.get(target);

            //credentials 
            var user = endPoint.getValue('restuser');
            var pwrd = endPoint.getValue('restpwd');
            var restURL = 'https://dev62933.service-now.com';
          



            // setup REST message to send over the newly created incident
            this.r = new sn_ws.RESTMessageV2('');
            this.r.setEndpoint(restURL + '/api/now/table/incident');
            this.r.setBasicAuth(user, pwrd);
            this.r.setRequestHeader('Content-Type', 'application/json');
            this.r.setLogLevel('all');
        } catch (err) {
            gs.info('prototype error is ' + err);
        }

    },


    // test the connection to the remote system 
    testConn: function() {

        try {
            gs.info('PS: testconn endpoint is ' + this.r.getEndpoint());
            this.r.setHttpMethod('get');
            this.r.setQueryParameter('sysparm_query', 'active=true');
            this.r.setQueryParameter('sysparm_fields', 'number');
            this.r.setQueryParameter('sysparm_limit', 1);
            var response = this.r.execute();
            var responseBody = response.getBody();
            var str = JSON.stringify(responseBody);
            var parser = new global.JSON().decode(response.getBody());
            var remoteIncidentNumber = parser.result[0].number;


            if (!remoteIncidentNumber=='') {
				return 'online';
            } else {

                gs.info('UTIL: testconn swtich http status is ' + httpStatus);
                switch (httpStatus) {
                    case '200':
                        return 'hibernating?';
                        break;
                    case '401':
                        return 'badUserPassword';
                        break;
                    case '0':
                        return 'badHost';
                        break;
                    default:
                        return httpStatus;
                        break
                }
            }




        } catch (err) {
            gs.info('testConn Util method error ' + err);
        }
    },



    // Open new incident - send to remote endpoint and record the remote incident in external numbers table
    open: function(incident) {

        gs.info('Starting Utils open function incident is ' + incident.number);


        // get fields for remote system 
        var fields = new GlideRecord('x_653938_interest_fields');

        var requestBody = {};
        fields.addQuery('module', incident.sys_class_name);

        fields.query();

        // build the response body for the rest message 
        while (fields.next()) {
            gs.info('Script field name is ' + fields.field_name);

            switch (fields.field_name.toString()) {
                case 'short_description':
                    requestBody.short_description = incident.short_description.toString();
                    break;
                case 'description':
                    requestBody.description = incident.description.toString();
                    break;
                case 'correlation_id':
                    requestBody.correlation_id = incident.number.toString();
                    break;
            }
        }
        var strRequestBody = global.JSON.stringify(requestBody);

        //post the incident to target system 
        this.r.setRequestBody(strRequestBody);
        this.r.setHttpMethod('post');
        var response = this.r.execute();
        var httpStatus = response.getStatusCode();


        //  REST failed to create the incident  		
        if (httpStatus != '201') {
            return false;
        }

        //process the reponse data
        var responseBody = response.getBody();
        var json = responseBody;
        var obj = JSON.parse(json); //define JSON parsing for the response JSON file to decode
        var remoteIncidentNumber = obj.result.number;
        gs.info('remoteIncidentNumber is : ' + remoteIncidentNumber);
        //set the correlation ID
        current.correlation_id = remoteIncidentNumber;
        current.update();
        return true;
    },

    type: 'InteRESTIncidentUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>pete</sys_created_by>
        <sys_created_on>2023-03-29 21:04:50</sys_created_on>
        <sys_id>17efabba973561103f5e318c1253afeb</sys_id>
        <sys_mod_count>130</sys_mod_count>
        <sys_name>InteRESTIncidentUtils</sys_name>
        <sys_package display_value="InteREST" source="x_653938_interest">836d672e97ad25103f5e318c1253af3d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="InteREST">836d672e97ad25103f5e318c1253af3d</sys_scope>
        <sys_update_name>sys_script_include_17efabba973561103f5e318c1253afeb</sys_update_name>
        <sys_updated_by>pete</sys_updated_by>
        <sys_updated_on>2023-04-06 14:55:31</sys_updated_on>
    </sys_script_include>
</record_update>
