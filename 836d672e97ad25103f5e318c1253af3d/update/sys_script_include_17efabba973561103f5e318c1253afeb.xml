<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_653938_interest.InteRESTIncidentUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>InteRESTIncidentUtils</name>
        <script><![CDATA[var InteRESTIncidentUtils = Class.create();
InteRESTIncidentUtils.prototype = {
    initialize: function(target) {




        // get record from target table
        var endPoint = new GlideRecord('x_653938_interest_target');
        endPoint.get(target);

        //credentials 
        var user = endPoint.getValue('restuser');
        var pwrd = endPoint.getValue('restpwd');
        var restURL = endPoint.getValue('target_url');




        // setup REST message to send over the newly created incident
        this.r = new sn_ws.RESTMessageV2('');
        this.r.setEndpoint(restURL + '/api/now/table/incident');
        this.r.setBasicAuth(user, pwrd);
        this.r.setRequestHeader('Content-Type', 'application/json');
        this.r.setLogLevel('all');

        // setup REST message to send over attachments 

        // 		  var gsa = new GlideSysAttachment();
        //                         var attContent = gsa.getContentBase64(att);
        this.attachmentMessage = new sn_ws.RESTMessageV2();
        this.attachmentMessage.setHttpMethod("post");
        this.attachmentMessage.setBasicAuth(user, pwrd);
        this.attachmentMessage.setEndpoint(restURL + '/api/now/attachment/file');
        this.attachmentMessage.setQueryParameter("table_name", "incident");
        //attachmentMessage.setQueryParameter("table_sys_id", sysUpd);
        //		attachmentMessage.setQueryParameter("file_name", sys_attach_gr.file_name);
        //	attachmentMessage.setRequestHeader("Content-Type",sys_attach_gr.content_type);
        this.attachmentMessage.setRequestHeader("Accept", "application/json");
        //		attachmentMessage.setRequestBodyFromAttachment(sys_attach_gr.sys_id);



        this.remoteSystem = endPoint;


    },


    // test the connection to the remote system 
    testConn: function() {

        try {

            this.r.setHttpMethod('get');
            this.r.setQueryParameter('sysparm_query', 'active=true');
            this.r.setQueryParameter('sysparm_fields', 'number,sys_id');
            this.r.setQueryParameter('sysparm_limit', 1);
            var response = this.r.execute();
            var httpStatus = response.getStatusCode();


            var responseBody = response.getBody();
            var str = JSON.stringify(responseBody);
            var parser = new global.JSON().decode(response.getBody());

            switch (httpStatus.toString()) {
                case '200':

                    if (!parser.result[0].number == "") {
                        return 'online';

                    } else {
                        return 'offline';
                    }
                    break;
                case '401':
                    return 'badUserPassword';
                    break;
                case '0':
                    return 'badHost';
                    break;
                default:
                    return httpStatus;
                    break;
            }




            //          

        } catch (err) {
            gs.info('testConn Util method error ' + err);
        }
    },



    // Open new incident - send to remote endpoint and record the remote incident in external numbers table
    open: function(incident) {



        // get fields for remote system 
        var fields = new GlideRecord('x_653938_interest_fields');

        //attachment count for this record 
        var sendAttachment = false;
        var requestBody = {};
        fields.addQuery('module', incident.sys_class_name);

        fields.query();

        // build the response body for the rest message 
        while (fields.next()) {
            switch (fields.field_name.toString()) {
                case 'short_description':
                    requestBody.short_description = incident.short_description.toString();
                    break;
                case 'description':
                    requestBody.description = incident.description.toString();
                    break;
                case 'correlation_id':
                    requestBody.correlation_id = incident.number.toString();
                    break;
                case 'attachment':

                    sendAttachment = true;
                    break;
            }
        }
        var strRequestBody = global.JSON.stringify(requestBody);

        //post the incident to target system 
        this.r.setRequestBody(strRequestBody);
        this.r.setHttpMethod('post');
        var response = this.r.execute();


        var httpStatus = response.getStatusCode();


        //  REST failed to create the incident  		
        if (httpStatus != '201') {
            return false;
        }

        //process the reponse data
        var responseBody = response.getBody();
        var json = responseBody;
        var obj = JSON.parse(json); //define JSON parsing for the response JSON file to decode
        var remoteIncidentNumber = obj.result.number;
        var remoteIncSysID = obj.result.sys_id;
      


        var extNum = new GlideRecord('x_653938_interest_external_numbers');
        extNum.external_number = remoteIncidentNumber;

      
        extNum.remote_system = this.remoteSystem.getValue('sys_id');
        try {
            extNum.number = incident.getValue('sys_id');

            extNum.insert();
        } catch (err) {
            gs.info('include - update to external number error is ' + err);
        }
        //set the correlation ID
        current.correlation_id = remoteIncidentNumber;
        current.update();

        if (sendAttachment) {
            //send the attachement		
            var att = new GlideRecord('sys_attachment');


            att.addQuery('table_name', incident.getTableName());
            att.addQuery('table_sys_id', incident.getValue('sys_id'));
            att.query();
            while (att.next()) {

                var gsa = new GlideSysAttachment();


                //create attachment object for remote incident  
                this.attachmentMessage.setQueryParameter("table_sys_id", remoteIncSysID);
                this.attachmentMessage.setQueryParameter("file_name", att.getValue('file_name'));
                this.attachmentMessage.setRequestHeader("Content-Type", att.content_type);

                //get content from local attachment and add to remote attachment
                this.attachmentMessage.setRequestBodyFromAttachment(att.sys_id);

                // send the attachment 				
                var response1 = this.attachmentMessage.execute();
                var responseBody1 = response1.getBody();
                httpStatusAtt = response1.getStatusCode();
            }
        }
        return true;
    },



    type: 'InteRESTIncidentUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>pete</sys_created_by>
        <sys_created_on>2023-03-29 21:04:50</sys_created_on>
        <sys_id>17efabba973561103f5e318c1253afeb</sys_id>
        <sys_mod_count>189</sys_mod_count>
        <sys_name>InteRESTIncidentUtils</sys_name>
        <sys_package display_value="InteREST" source="x_653938_interest">836d672e97ad25103f5e318c1253af3d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="InteREST">836d672e97ad25103f5e318c1253af3d</sys_scope>
        <sys_update_name>sys_script_include_17efabba973561103f5e318c1253afeb</sys_update_name>
        <sys_updated_by>pete</sys_updated_by>
        <sys_updated_on>2023-04-19 19:53:58</sys_updated_on>
    </sys_script_include>
</record_update>
