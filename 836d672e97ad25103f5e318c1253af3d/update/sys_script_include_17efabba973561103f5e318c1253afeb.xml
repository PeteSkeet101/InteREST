<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_653938_interest.InteRESTIncidentUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>InteRESTIncidentUtils</name>
        <script><![CDATA[var InteRESTIncidentUtils = Class.create();
InteRESTIncidentUtils.prototype = {
    initialize: function(target) {
        gs.info('SI target is ' + target);
        // get record from target table
        var endPoint = new GlideRecord('x_653938_interest_target');
        endPoint.get(target);

        //credentials 
        var user = endPoint.getValue('restuser');
        var pwrd = endPoint.restpwd.getDecryptedValue();
        this.restURL = endPoint.getValue('target_url');
        gs.info('SI the restURL is ' + this.restURL);
        // setup REST message to send over the newly created incident
        this.r = new sn_ws.RESTMessageV2('');
        this.r.setEndpoint(this.restURL + '/api/x_653938_interest/incident');
        this.r.setBasicAuth(user, pwrd);
        this.r.setRequestHeader('Content-Type', 'application/json');
        this.r.setLogLevel('all');

        this.remoteSystem = endPoint;


        // setup REST message to send over attachments 
        this.attachmentMessage = new sn_ws.RESTMessageV2();
        this.attachmentMessage.setHttpMethod("post");
        this.attachmentMessage.setBasicAuth(user, pwrd);
        this.attachmentMessage.setEndpoint(this.restURL + '/api/now/attachment/file');
        this.attachmentMessage.setQueryParameter("table_name", "incident");
        this.attachmentMessage.setRequestHeader("Accept", "application/json");

    },


    // test the connection to the remote system 
    testConn: function() {

        try {
            this.r.setEndpoint(this.restURL + '/api/now/table/incident');
            this.r.setHttpMethod('get');
            this.r.setQueryParameter('sysparm_query', 'active=true');
            this.r.setQueryParameter('sysparm_fields', 'number,sys_id');
            this.r.setQueryParameter('sysparm_limit', 1);
            var parser = '';
            //send get to remote to retrieve single incident record
            var response = this.r.execute();
            var httpStatus = response.getStatusCode();




            var responseBody = response.getBody();

            //check that response is an array otherwise as GET should return an array 
            if (Array.isArray(response.getBody())) {
                parser = new global.JSON().decode(response.getBody());
            }

            //return the result of the GET message  		
            switch (httpStatus.toString()) {
                case '200':
                    // if an incident was returned system is online and responding
                    if (!parser.result[0].number == "") {
                        return 'online';

                    } else {
                        return 'offline';
                    }
                    break;
                case '401':
                    return 'badUserPassword';
                    break;
                case '0':
                    return 'badHost';
                    break;
                    // if 503 system is redirecting to the dev site
                case '503':
                    return 'hibernating';
                    break;
                default:
                    return httpStatus;
                    break;
            }




            //          

        } catch (err) {
            gs.info('testConn Util method error ' + err);
        }
    },



    // Open new incident - send to remote endpoint and record the remote incident in external numbers table
    open: function(incident) {
        this.r.setEndpoint(this.restURL + '/api/x_653938_interest/incident');
        // get fields for remote system 
        var fields = new GlideRecord('x_653938_interest_fields');

        //attachment flag for this record 
        var sendAttachment = false;
        var requestBody = {};

        // get the fields related to the incident module only
        fields.addQuery('module', incident.sys_class_name);

        fields.query();

        // build the response body for the rest message 
        while (fields.next()) {
            switch (fields.field_name.toString()) {
                case 'short_description':
                    requestBody.short_description = incident.short_description.toString();
                    break;
                case 'description':
                    requestBody.description = incident.description.toString();
                    break;
                case 'correlation_display':
                    requestBody.correlation_display = incident.number.toString();
                    break;
                case 'attachment':

                    sendAttachment = true;
                    break;
            }
        }
        var strRequestBody = global.JSON.stringify(requestBody);

        //post the incident to target system 
        this.r.setRequestBody(strRequestBody);
        this.r.setHttpMethod('post');
        var response = this.r.execute();


        var httpStatus = response.getStatusCode();


        //  REST failed to create the incident  		
        if (httpStatus != '201') {
            return false;
        }

        //process the reponse data
        var responseBody = response.getBody();
        var json = responseBody;
        var obj = JSON.parse(json); //define JSON parsing for the response JSON file to decode
        gs.info('SI the response is ' + json);
        var remoteIncidentNumber = obj.result.number;
        var remoteIncSysID = obj.result.sys_id;


        // create a new external number record to record the e-bonded number
        var extNum = new GlideRecord('x_653938_interest_external_numbers');
        extNum.external_number = remoteIncSysID;


        extNum.remote_system = this.remoteSystem.getValue('sys_id');
        try {
            extNum.number = incident.getValue('sys_id');
            extNum.insert();

        } catch (err) {
            gs.info('include - update to external number error is ' + err);
        }


        //set the correlation ID - sets the most recent external number to the main correlation ID field
        current.correlation_display = remoteIncidentNumber;
        current.correlation_id = obj.result.sys_id;
        current.update();


        // send attachments 
        gs.info('attachment flag is ' + sendAttachment);
        if (sendAttachment) {
            //get the attachments for the record		

            var att = new GlideRecord('sys_attachment');
            att.addQuery('table_name', incident.getTableName());
            att.addQuery('table_sys_id', incident.getValue('sys_id'));
            att.query();

            // loop for each attachment 
            while (att.next()) {

                var gsa = new GlideSysAttachment();


                //create message for attachment object for remote incident  
                this.attachmentMessage.setQueryParameter("table_sys_id", remoteIncSysID);
                this.attachmentMessage.setQueryParameter("file_name", att.getValue('file_name'));
                this.attachmentMessage.setRequestHeader("Content-Type", att.content_type);

                //get content from local attachment and add to remote attachment
                this.attachmentMessage.setRequestBodyFromAttachment(att.sys_id);

                // send the attachment 				
                var response1 = this.attachmentMessage.execute();
                var responseBody1 = response1.getBody();
                httpStatusAtt = response1.getStatusCode();
            }
        }
        return true;
    },

    // send updates included in param2 for event to remote systems in sys_id in param1
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
    update: function(jsonUpdates) {

        //  gs.info('SI update function started');
        var requestBody = {};


        gs.info('SI jsonUpdates is ' + jsonUpdates);
     
            var updates = global.JSON.parse(jsonUpdates); //jsonUpdates  "{\"short_description\":\"e\"}"
			
			gs.info('SI 220 extID is '+updates['extID']);
            this.r.setEndpoint(this.restURL + '/api/now/table/incident/' + updates['extID']);
   try {
		for (var key in updates) {

                var value = updates[key];
                requestBody[key] = updates[key];
                var strRequestBody = global.JSON.stringify(requestBody);


                //       gs.info('SI216 - value is ' + value);
                //     gs.info('SI216 - key is ' + key);
                switch (key) {
                    case 'short_description':
                        requestBody.short_description = value;
                        break;
                    case 'description':
                        requestBody.description = value;
                        break;
                }
            }
            var strRequestBody = global.JSON.stringify(requestBody);
            gs.info('SI update strRequestBody is ' + strRequestBody);
            //         //post the incident to target system 
            this.r.setRequestBody(strRequestBody);
            this.r.setHttpMethod('patch');
            var response = this.r.execute();


            var httpStatus = response.getStatusCode();


            //   var mytext = updates.short_description;
            //     gs.info('SI 1. updates.short_description is  ' + mytext);
            //gs.info('SI227: RequestBody is '+strRequestBody);




        } catch (err) {
            gs.info('SI: error is ' + err);
        }
        //         // get fields for remote system

        //         var fields = new GlideRecord('x_653938_interest_fields');

        //         //attachment flag for this record 
        //         var sendAttachment = false;
        //         var requestBody = {};
        //         fields.addQuery('module', incident.sys_class_name);

        //         fields.query();

        //         // build the response body for the rest message 
        //         while (fields.next()) {
        //             switch (fields.field_name.toString()) {
        //                 case 'short_description':
        //                     requestBody.short_description = incident.short_description.toString();
        //                     break;
        //                 case 'description':
        //                     requestBody.description = incident.description.toString();
        //                     break;
        //                 case 'correlation_id':
        //                     requestBody.correlation_id = incident.number.toString();
        //                     break;
        //                 case 'attachment':

        //                     sendAttachment = true;
        //                     break;
        //             }
        //         }
        //         var strRequestBody = global.JSON.stringify(requestBody);

        //         //post the incident to target system 
        //         this.r.setRequestBody(strRequestBody);
        //         this.r.setHttpMethod('post');
        //         var response = this.r.execute();


        //         var httpStatus = response.getStatusCode();


        //         //  REST failed to create the incident  		
        //         if (httpStatus != '201') {
        //             return false;
        //         }

        //         //process the reponse data
        //         var responseBody = response.getBody();
        //         var json = responseBody;
        //         var obj = JSON.parse(json); //define JSON parsing for the response JSON file to decode
        //         var remoteIncidentNumber = obj.result.number;
        //         var remoteIncSysID = obj.result.sys_id;


        //         // create a new external number record to record the e-bonded number
        //         var extNum = new GlideRecord('x_653938_interest_external_numbers');
        //         extNum.external_number = remoteIncidentNumber;


        //         extNum.remote_system = this.remoteSystem.getValue('sys_id');
        //         try {
        //             extNum.number = incident.getValue('sys_id');
        //             extNum.insert();

        //         } catch (err) {
        //             gs.info('include - update to external number error is ' + err);
        //         }


        //         //set the correlation ID - sets the most recent external number to the main correlation ID field
        //         current.correlation_id = remoteIncidentNumber;
        //         current.update();


        //         // send attachments 
        // 		gs.info('attachment flag is '+ sendAttachment);
        //         if (sendAttachment) {
        //             //get the attachments for the record		

        //             var att = new GlideRecord('sys_attachment');
        //             att.addQuery('table_name', incident.getTableName());
        //             att.addQuery('table_sys_id', incident.getValue('sys_id'));
        //             att.query();

        //             // loop for each attachment 
        //             while (att.next()) {

        //                 var gsa = new GlideSysAttachment();


        //                 //create message for attachment object for remote incident  
        //                 this.attachmentMessage.setQueryParameter("table_sys_id", remoteIncSysID);
        //                 this.attachmentMessage.setQueryParameter("file_name", att.getValue('file_name'));
        //                 this.attachmentMessage.setRequestHeader("Content-Type", att.content_type);

        //                 //get content from local attachment and add to remote attachment
        //                 this.attachmentMessage.setRequestBodyFromAttachment(att.sys_id);

        //                 // send the attachment 				
        //                 var response1 = this.attachmentMessage.execute();
        //                 var responseBody1 = response1.getBody();
        //                 httpStatusAtt = response1.getStatusCode();
        //             }
        //         }
        return true;
    },


    type: 'InteRESTIncidentUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>pete</sys_created_by>
        <sys_created_on>2023-03-29 21:04:50</sys_created_on>
        <sys_id>17efabba973561103f5e318c1253afeb</sys_id>
        <sys_mod_count>254</sys_mod_count>
        <sys_name>InteRESTIncidentUtils</sys_name>
        <sys_package display_value="InteREST" source="x_653938_interest">836d672e97ad25103f5e318c1253af3d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="InteREST">836d672e97ad25103f5e318c1253af3d</sys_scope>
        <sys_update_name>sys_script_include_17efabba973561103f5e318c1253afeb</sys_update_name>
        <sys_updated_by>pete</sys_updated_by>
        <sys_updated_on>2023-11-01 13:32:50</sys_updated_on>
    </sys_script_include>
</record_update>
