<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition>(current.sys_updated_by!='System')</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Incident_update</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
gs.info('BR update: Starting incident update');
    var jsnParam = '';

    // get existing external numbers
    var extNums = new GlideRecord('x_653938_interest_external_numbers');
    extNums.addQuery('number', current.sys_id);
    extNums.query();
    var firstJSON = 0;

    // get end point for the group 
    var groups = new GlideRecord('x_653938_interest_groups');


    //check if the current assignment group is ebonded
    if (groups.get('group', current.assignment_group)) {

        //check if incident has already been ebonded - if yes, update otherwise open incident on remote ep 
        if (checkIfEbonded()) {
            updateAllEndPoints()

            gs.info('BR sending updates to all endpoints');


        }
    } else {
        gs.info('BR update - did not get a group');
    }





    function getUpdates(remoteSystem) {
        // get updates from incident for the remote systems fields
        gs.info('BR update getUpdates system is  ' + remoteSystem);


        try {

            var ep = new GlideRecord('x_653938_interest_target');
            ep.get(remoteSystem);



            // get fields for remote system 
            var fields = new GlideRecord('x_653938_interest_fields');
            fields.addQuery('module', current.sys_class_name);
            fields.addQuery('target.name', ep.getValue('name'));
            fields.query();

        } catch (err) {
            gs.info('BR update Error is ' + err);
        }

        //check if each of the fields have been updated
        while (fields.next()) {


            if (current[fields.getValue('field_name')] != previous[fields.getValue('field_name')]) {

                //add field and value to JSON variable
                if (firstJSON > 0) {

                    jsnParam = jsnParam + ',';
                }

                firstJSON = firstJSON + 1;
                jsnParam = jsnParam + '"' + fields.getValue('field_name') + '":"' + current[fields.getValue('field_name')] + '"';

            }



            if (!fields.hasNext()) {


                jsnParam = jsnParam + '}';

            }
        }
        return jsnParam;
    }

    function checkIfEbonded() {
        // check if endpoint is already listed in the external numbers for incident
        var extNumsCheck = getExtNums();

        gs.info('BR update check if existing ebond is ' + extNumsCheck.hasNext());

        if (extNumsCheck.next()) {
            return true;
        } else {
            return false;
        }


    }


    //Add event to send update to each system
	
	
    function updateAllEndPoints() {
        var updateNumbers = getExtNums();

		
        //get a list of all the ebonded systems and their numbers 
		
		
        while (updateNumbers.next()) {
            try {
                gs.info(' line 108 remote_system value is ' + updateNumbers.remote_system);
                jsnParam = '{"extID":"' + updateNumbers.external_number + '",';
                jUpdates = getUpdates(updateNumbers.remote_system);
            } catch (err) {
                gs.info('Error is ' + err);
            }
            gs.info('BR Function update all endpoint value is ' + jUpdates);
            gs.eventQueue('x_653938_interest.incident_update', current, updateNumbers.remote_system, jUpdates);
        }
    }

    //get list of all external numbers for the current record


    function getExtNums() {

        var numsCheck = new GlideRecord('x_653938_interest_external_numbers');
        numsCheck.addQuery('number', current.sys_id);
        numsCheck.query();
        return numsCheck;
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>pete</sys_created_by>
        <sys_created_on>2023-09-26 13:33:11</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>cb74b64d97a171103f5e318c1253af6f</sys_id>
        <sys_mod_count>82</sys_mod_count>
        <sys_name>Incident_update</sys_name>
        <sys_overrides/>
        <sys_package display_value="InteREST" source="x_653938_interest">836d672e97ad25103f5e318c1253af3d</sys_package>
        <sys_policy/>
        <sys_scope display_value="InteREST">836d672e97ad25103f5e318c1253af3d</sys_scope>
        <sys_update_name>sys_script_cb74b64d97a171103f5e318c1253af6f</sys_update_name>
        <sys_updated_by>pete</sys_updated_by>
        <sys_updated_on>2023-11-30 22:09:43</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=cb74b64d97a171103f5e318c1253af6f"/>
</record_update>
